name: MapleCart CI/CD Pipeline ðŸš€

# -------------------------------------------------------------------
# ðŸ”¹ TRIGGERS
# -------------------------------------------------------------------
# Run automatically on pushes or PRs to main (prod) and dev (staging)
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

# -------------------------------------------------------------------
# ðŸ”¹ ENVIRONMENT GLOBALS
# -------------------------------------------------------------------
env:
  NODE_VERSION: 20
  APP_PATH: Frontend
  BUILD_PATH: dist

# -------------------------------------------------------------------
# ðŸ”¹ JOB 1: Build, Lint, and Test Frontend
# -------------------------------------------------------------------
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: ðŸ§ª Build, Lint, and Test Frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.APP_PATH }}/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.APP_PATH }}

      - name: Run Linter
        run: npm run lint --if-present
        working-directory: ${{ env.APP_PATH }}

      - name: Run Tests
        run: npm test --if-present
        working-directory: ${{ env.APP_PATH }}

      - name: Build Project
        run: npm run build
        working-directory: ${{ env.APP_PATH }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: maplecart-build
          path: ${{ env.APP_PATH }}/${{ env.BUILD_PATH }}

# -------------------------------------------------------------------
# ðŸ”¹ JOB 2: Deploy to Azure Static Web App
# -------------------------------------------------------------------
  deploy:
    runs-on: ubuntu-latest
    name: ðŸš€ Deploy to Azure Static Web App
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: maplecart-build
          path: ${{ env.APP_PATH }}/${{ env.BUILD_PATH }}

      - name: Deploy to Azure Static Web App
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_YELLOW_GLACIER_01A9DA70F }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: ${{ env.APP_PATH }}
          output_location: ${{ env.BUILD_PATH }}
        env:
          VITE_AZURE_FUNCTION_ENDPOINT: ${{ secrets.VITE_AZURE_FUNCTION_ENDPOINT }}
          VITE_ENVIRONMENT: production

# -------------------------------------------------------------------
# ðŸ”¹ JOB 3: Post-Deployment Smoke Test
# -------------------------------------------------------------------
  smoke-test:
    runs-on: ubuntu-latest
    name: ðŸ”¥ Post-Deployment Smoke Test
    needs: deploy
    steps:
      - name: Test API endpoint availability
        run: |
          echo "Checking API health..."
          curl -f -s ${{ secrets.VITE_AZURE_FUNCTION_ENDPOINT }}/GetOrders?source=sql | jq .
        continue-on-error: false

      - name: Test Frontend availability
        run: |
          echo "Checking frontend availability..."
          curl -f -I https://yellow-glacier-01a9da70f.2.azurestaticapps.net
        continue-on-error: false

# -------------------------------------------------------------------
# ðŸ”¹ JOB 4: Notify via Logic App (Email)
# -------------------------------------------------------------------
  notify-logicapp:
    runs-on: ubuntu-latest
    name: ðŸ“§ Notify Logic App (Deployment Status)
    needs: smoke-test
    if: always()
    steps:
      - name: Send deployment event to Logic App
        run: |
          echo "ðŸ“¨ Sending deployment status to Logic App..."
          curl -X POST "${{ secrets.LOGICAPP_URL }}" \
          -H "Content-Type: application/json" \
          -d '{"status": "${{ job.status }}","environment": "production","workflow": "Azure Static Web App CI/CD","run_id": "${{ github.run_id }}","commit": "${{ github.sha }}","repo": "${{ github.repository }}","timestamp": "${{ github.run_started_at }}"}'
